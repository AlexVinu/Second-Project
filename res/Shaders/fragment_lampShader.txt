#version 330 core
  
struct Material{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 color;
	float shininess;
};
struct Light{
	vec3 pos;
	vec3 color;
	float power;
};
uniform Material material;
uniform Light light;

uniform vec3 viewPos;

in vec3 Normal;
in vec3 FragPos;
out vec4 color;
void main()
{	
    vec3 ambient = light.color * material.ambient * 0.1f;
	vec3 norm = normalize(Normal);
	vec3 reverseLightDir = normalize(light.pos - FragPos);
	float diff = max(dot(norm, reverseLightDir), 0.0);
	vec3 diffuse = light.color * (diff * material.diffuse)*light.power;
	vec3 reverseViewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-reverseLightDir, norm);
	float spec = pow(max(dot(reverseViewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.color * (spec * material.specular)*light.power;
	vec3 result = (ambient + diffuse + specular) * material.color;
	color = vec4(result, 1.0);
}