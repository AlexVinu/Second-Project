#version 330 core

in vec2 Texcoords;
in vec3 Normal;
in vec3 FragPosition;
out vec4 OutColor;

uniform sampler2D ourTexture1;
uniform sampler2D ourTexture2;
uniform vec3 viewPosition;
uniform vec3 lightColor;
uniform vec3 lightPosition;

float ambientStrength = 0.1f;
float specularStrength = 0.5f;
void main(){
	vec3 ambient = lightColor * ambientStrength;
	vec3 norm = normalize(Normal);
	vec3 reverseLightDirection = normalize(lightPosition - FragPosition);
	float diff = max(dot(reverseLightDirection, norm), 0.0);
	vec3 diffuse = diff * lightColor;
	vec3 reflectLight = reflect(-reverseLightDirection, norm);
	vec3 reverseViewDir = normalize(viewPosition - FragPosition);
	float spec = pow(max(dot(reverseViewDir, reflectLight),0.0),32);
	vec3 specular = spec * specularStrength * lightColor;
	OutColor = vec4(ambient + diffuse + specular, 1.0)*mix(texture(ourTexture1, Texcoords), texture(ourTexture2, Texcoords), 0.5);
}